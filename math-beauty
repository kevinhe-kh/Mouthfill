<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>P5.js Creative Code Runner</title>
    
    <!-- Include the p5.js library from a CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.min.js"></script>

    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #1a1a1a;
            color: #f0f0f0;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
            padding: 20px;
        }
        header {
            text-align: center;
            margin-bottom: 20px;
        }
        h1 {
            margin: 0;
            color: #ffffff;
        }
        p {
            color: #cccccc;
        }
        #button-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #333;
            color: #fff;
            border: 1px solid #555;
            border-radius: 5px;
            transition: background-color 0.2s, transform 0.1s;
        }
        button:hover {
            background-color: #4CAF50;
        }
        button:active {
            transform: scale(0.98);
        }
        #canvas-container {
            border: 2px solid #444;
            border-radius: 8px;
            padding: 5px;
            background-color: #282828;
            /* The canvas itself will have its own background */
        }
    </style>
</head>
<body>

    <header>
        <h1>Creative Code Runner</h1>
        <p>Click a button to run a different p5.js animation.</p>
    </header>

    <div id="button-container">
        <!-- Buttons will be generated here by JavaScript -->
    </div>

    <div id="canvas-container">
        <!-- The p5.js canvas will be placed here -->
    </div>

    <script>
        // Array containing all the code snippets
        const codeSnippets = [
            `a=(x,y,d=5*cos(o=mag(k=x/8-12.5,e=y/8-12.5)/12*cos(sin(k/2)*cos(e/2))))=>
            point((x+d*k*(sin(d*2+t)+sin(y*o*o)/9))/1.5+133,(y/3-d*40+19*cos(d+t))*1.5+300)
            t=0,draw=$=>{t||createCanvas(w=400,w);background(6,96).stroke(w,46);for(t+=PI/90,i=4e4;i--;)a(i%200,i/200)}`,
            
            `a=(x,y,o=3-mag(k=x/8-12.5,e=y/8-12)/3,d=-4*(sin(k/2)*cos(e)))=>point((x+e*cos(t)+d*k*sin(d+t))*.7+k*o+130,(y-d*19+d*e*cos(d+t))*.7+130)
            t=0,draw=$=>{t||createCanvas(w=400,w);background(6,96).stroke(w,46);for(t+=PI/90,i=4e4;i--;)a(i%200,i/200)}`,

            `a=(x,y,o=2-mag(k=x/8-12,e=y/8-12)/3,d=-5*abs(sin(k/2)*cos(e*.8)))=>point((x-d*k*4+d*k*sin(d+t))*.7+k*o*2+130,(y-d*y/5+d*e*cos(d+t+o)*sin(t+d))*.7+e*o+70)
            t=0,draw=$=>{t||createCanvas(w=400,w);background(6,96).stroke(w,46);for(t+=PI/90,i=4e4;i--;)a(i%200,i/200)}`,

            `a=(x,y,d=5*cos(mag(k=x/8-25,e=y/8-25)/3))=>[(x+d*k*sin(d*2.5-t)+k/2*sin(y/3+t))/2+100,d*19+(d-2)*5*abs(cos(d/2-t/2))+d*e+215]
            t=0,draw=$=>{t||createCanvas(w=400,w);background(6).stroke(255,66);for(t+=PI/60,y=100;y<300;y++)for(x=100;x<300;x++)point(...a(x,y))}`,

            `a=(x,y,d=2*cos(mag(k=x/8-25,e=y/8-25)/3-t))=>[x+d*k,y+d*e]
            s=3,t=0,draw=$=>{t||createCanvas(w=400,w);background(6).stroke(255,196).randomSeed(0);for(t+=.02,y=100;y<300;y+=s)for(x=100;x<300;x+=s)line(...shuffle([a(x,y),a(x,y+s),a(x+s,y)]).flat())}`,

            `t=0,draw=$=>{t||createCanvas(720,720);background(0);for(s=PI/30,j=(t+=s/4)/4%s;j<7;j+=s)for(i=0;i<TAU;i+=s*2)stroke(j*50).quad(...[[i+s,j],[i,j],[i+s,j+s],[i,j+s]].flatMap(([u,v,e=v**3*4+0])=>[e*cos(u+j)+e/v*sin(v*3-t)+360,360+e/v*cos(v*3-t)-e*sin(u+j)]))}`
        ];

        // Variable to hold the current p5.js sketch instance
        let currentSketch = null;
        const buttonContainer = document.getElementById('button-container');

        // Function to run a sketch from a code string
        function runSketch(code) {
            // If a sketch is already running, remove it to stop the animation and clear the canvas
            if (currentSketch) {
                currentSketch.remove();
            }

            // This is the "sketch" function that p5.js will run.
            // It uses instance mode to keep everything contained.
            const sketch = (p) => {
                // We need to declare variables that the user's code will create
                // so we can capture them from the 'eval' scope.
                let draw, t, a, s, w;
                
                // Use `p.draw` as the main animation loop.
                p.draw = () => {
                    // 'eval' is used here to execute the user-provided code string.
                    // This is generally unsafe, but acceptable here since we are providing the code ourselves.
                    // The code string will define the 'draw' function and other variables on its first run.
                    // We re-evaluate it each frame to update variables, which is how this compact code style is designed to work.
                    // Using 'with(p)' makes all p5 functions (like background, stroke, etc.) available
                    // without needing to prefix them with 'p.'
                    with (p) {
                         eval(code);
                         draw(); // The 'eval' just defined the draw function, now we call it.
                    }
                };
            };
            
            // Create a new p5 instance with our sketch function, and tell it to live in the 'canvas-container' div
            currentSketch = new p5(sketch, 'canvas-container');
        }

        // Create a button for each code snippet
        codeSnippets.forEach((code, index) => {
            const button = document.createElement('button');
            button.textContent = `Run Art ${index + 1}`;
            button.addEventListener('click', () => runSketch(code));
            buttonContainer.appendChild(button);
        });

        // Automatically run the first sketch on page load for a nice welcome
        if (codeSnippets.length > 0) {
            runSketch(codeSnippets[0]);
        }

    </script>
</body>
</html>
